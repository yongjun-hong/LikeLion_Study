@컨트롤러
스프링 프레임워크는 MVC패턴을 사용하고있고,
여기서 Controller는 화면(View)과 비즈니스 로직(Model)를 연결시키는 다리 역할을 한다. 
쉽게 말하자면 화면에서 /aaa 로 가줘~ 하고 요청하면 주소를 받아들여 
어디로 갈지 분석하고 맞는 길로 연결시켜주는 역할이다. 

JPA(java persistent api)
자바 ORM(object relational mapping) 기술에 대한 api 표준 명세를 뜻
{ORM(object relational mapping) : 객체와 관계형 데이터 베이스를 매핑해주는 기술}
JPA는 라이브러리가 아닌 ORM을 사용하기 위한 인터페이스 모음이다.
Spring Data JPA를 사용하여 쉽게 스프링에서 제공하는 모듈로 내부적으로 JPA 구현체를 이용

타임리프
build gradle 에 아래 것을 추가시켜줌
implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
html 파일은 resources안에서 작업하면 됨
<html xmlns:th="http://www.thymeleaf.org"> // html에서 타임리프를 쓰기위한 네임페이스
 <h1 th:text="${title}">기본 제목</h1> //th:text 속성을 사용하여 변수 출력

Entity
데이터베이스의 테이블과 매핑되는 자바 객체입니다.
데이터베이스에서 데이터를 읽어와 객체로 변환하거나, 객체에서 데이터를 읽어와 데이터베이스에 저장하는 등의 역할을 합니다.
JPA(Java Persistence API)를 사용하여 객체-관계 매핑(ORM, Object-Relational Mapping)을 구현할 때 많이 사용됩니다.

DTO (Data Transfer Object)
Entity와 Controller 사이에서 데이터 전송을 위한 객체입니다.
Entity 객체에서 필요한 필드만을 선택하여 DTO 객체에 담아서 전달하거나, 반대로 DTO 객체에서 필요한 필드만을 선택하여 Entity 객체에 담아서 저장하는 등의 역할을 합니다.
Controller에서 받은 요청(Request)에 대한 응답(Response)을 DTO 객체로 반환하면, 클라이언트와의 통신에 필요한 정보만을 담은 객체를 전송할 수 있습니다.

Controller
클라이언트의 요청을 받아서 비즈니스 로직을 처리한 후, 응답을 반환하는 컴포넌트입니다.
요청(Request)을 처리하기 위해 적절한 Service 객체를 호출하고, Service에서 반환된 응답(Response)을 DTO 객체로 변환하여 반환합니다.

Repository
데이터베이스에 접근하기 위한 인터페이스입니다.
Entity 객체의 저장, 조회, 수정, 삭제 등의 CRUD(Create-Read-Update-Delete) 작업을 수행합니다.
Spring Data JPA에서 제공하는 JpaRepository 인터페이스를 상속받아서 구현하면, 자동으로 CRUD 작업을 수행할 수 있습니다.

Service
비즈니스 로직을 구현하는 컴포넌트입니다.
Controller에서 받은 요청(Request)을 처리하기 위해 적절한 Repository를 호출하고, Repository에서 반환된 Entity 객체를 DTO 객체로 변환하여 반환합니다.
필요한 경우 여러 Repository를 호출하여 데이터를 조합하거나, 복잡한 비즈니스 로직을 처리합니다.
JPA란 자바 진영에서 ORM 기술 표준으로 사용되는 인터페이스의 모음이다.
데이터베이스와 관련된 작업을 보다 쉽게 처리할 수 있도록 하는 API입니다.
JPA를 구현한 대표적인 오픈소스로는 Hibernate가 있다.

JPA는 반복적인 CRUD SQL을 처리해준다.
JPA를 사용하므로써 객체 중심으로 개발할 수 있다.
Entity Manager을 통해 데이터베이스와의 연결 관리, 트랜잭션 관리등의 작업을 쉽게 처리할 수 있도록 합니다.
또한, JPA는 JPQL을 제공하여 SQL쿼리를 작성하는 것보다 객체지향적인 방식으로 데이터를 조회할 수 있습니다.

*객체 지향이란?
자바에서의 객체는 클래스를 통해 정의됩니다.
클래스는 객체의 특성을 나타내는 변수와 객체의 동작을 나타내는 메소드를 포함하고 있습니다.
객체는 클래스를 통해 생성됩니다. 캡슐화, 상속성, 다형성등의 객체지향적인 개념을 지원합니다.

Student student = new Student("John", 18, 2); // Student 클래스를 통해 객체를 생성한다.

컨트롤러

스프링 프레임워크에서 MVC 아키텍처에서 Controller 역할을 수행하는 클래스입니다.
즉, 클라이언트의 요청을 처리하고, 응답을 생성하는 역할을 합니다.

어노테이션
@Controller: 해당 클래스가 컨트롤러임을 선언하는 어노테이션입니다.
@RestController: 해당 클래스가 RESTful API를 제공하는 컨트롤러임을 선언하는 어노테이션입니다.
@RequestMapping: 클라이언트의 요청을 처리할 메소드와 경로를 지정하는 어노테이션입니다.
@GetMapping: HTTP GET 요청을 처리할 메소드와 경로를 지정하는 어노테이션입니다.
@PostMapping: HTTP POST 요청을 처리할 메소드와 경로를 지정하는 어노테이션입니다.
@PutMapping: HTTP PUT 요청을 처리할 메소드와 경로를 지정하는 어노테이션입니다.
@DeleteMapping: HTTP DELETE 요청을 처리할 메소드와 경로를 지정하는 어노테이션입니다.
@PathVariable: 경로에서 변수 값을 추출하여 메소드의 파라미터로 전달받을 수 있도록 해주는 어노테이션입니다.
@RequestParam: 요청 파라미터 값을 메소드의 파라미터로 전달받을 수 있도록 해주는 어노테이션입니다.
@RequestBody: 요청 본문을 메소드의 파라미터로 전달받을 수 있도록 해주는 어노테이션입니다.
@ModelAttribute: 요청 파라미터 값을 객체로 변환하여 메소드의 파라미터로 전달받을 수 있도록 해주는 어노테이션입니다.

중요한 것으로는 Controller, (GET,POST)Mapping, PathVariable, RequestBody등이 있습니다.